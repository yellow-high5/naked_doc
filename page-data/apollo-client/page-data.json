{"componentChunkName":"component---src-templates-docs-tsx","path":"/apollo-client","result":{"data":{"site":{"siteMetadata":{"title":"Naked Doc | Simple startup document","docsLocation":"https://github.com/yellow-high5/naked_doc/tree/master/content"}},"mdx":{"fields":{"id":"84e2da56-17b6-5fe4-9813-84988b0c6459","title":"Set up a GraphQL client with Apollo","slug":"/apollo-client"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Set up a GraphQL client with Apollo\",\n  \"metaTitle\": \"Apollo Client GraphQL Setup | GraphQL React Apollo Hooks Tutorial\",\n  \"metaDescription\": \"You will learn how to configure Apollo Client in React by installing dependencies like apollo-boost @apollo/react-hooks apollo-link-ws\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Apollo gives a neat abstraction layer and an interface to your GraphQL server. You don't need to worry about constructing your queries with request body, headers and options, that you might have done with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"axios\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetch\"), \" say. You can directly write queries and mutations in GraphQL and they will automatically be sent to your server via your apollo client instance.\"), mdx(\"h3\", null, \"React Apollo Hooks Installation\"), mdx(\"p\", null, \"Let's get started by installing apollo client & peer graphql dependencies:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ npm install apollo-boost @apollo/react-hooks graphql\\n\")), mdx(\"h3\", null, \"Create Apollo Client Instance\"), mdx(\"p\", null, \"Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/App.js\"), \" and add the following imports at the top:\"), mdx(GithubLink, {\n    link: \"https://github.com/hasura/learn-graphql/blob/master/tutorials/frontend/react-apollo-hooks/app-final/src/components/App.js\",\n    text: \"src/components/App.js\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import React from 'react';\\n\\nimport Header from './Header';\\nimport TodoPrivateWrapper from './Todo/TodoPrivateWrapper';\\nimport TodoPublicWrapper from './Todo/TodoPublicWrapper';\\nimport OnlineUsersWrapper from './OnlineUsers/OnlineUsersWrapper';\\n\\n+ import ApolloClient from 'apollo-client';\\n+ import { InMemoryCache } from 'apollo-cache-inmemory';\\n+ import { HttpLink } from 'apollo-link-http';\\n+ import { ApolloProvider } from '@apollo/react-hooks';\\n\\nimport { useAuth0 } from \\\"./Auth/react-auth0-spa\\\";\\n\\nconst App = ({ idToken }) => {\\n  const { loading, logout } = useAuth0();\\n  if (loading) {\\n    return <div>Loading...</div>;\\n  }\\n  return (\\n    <div>\\n      <Header logoutHandler={logout} />\\n      <div className=\\\"row container-fluid p-left-right-0 m-left-right-0\\\">\\n          <div className=\\\"row col-md-9 p-left-right-0 m-left-right-0\\\">\\n            <div className=\\\"col-md-6 sliderMenu p-30\\\">\\n              <TodoPrivateWrapper />\\n            </div>\\n            <div className=\\\"col-md-6 sliderMenu p-30 bg-gray border-right\\\">\\n              <TodoPublicWrapper />\\n            </div>\\n          </div>\\n          <div className=\\\"col-md-3 p-left-right-0\\\">\\n            <div className=\\\"col-md-12 sliderMenu p-30 bg-gray\\\">\\n              <OnlineUsersWrapper />\\n            </div>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\")), mdx(\"p\", null, \"These are the required apollo dependencies to get started. Now let's define a function which will return apollo client with httplink and cache.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import ApolloClient from 'apollo-client';\\nimport { InMemoryCache } from 'apollo-cache-inmemory';\\nimport { HttpLink } from 'apollo-link-http';\\nimport { ApolloProvider } from '@apollo/react-hooks';\\n\\n+ const createApolloClient = (authToken) => {\\n+  return new ApolloClient({\\n+    link: new HttpLink({\\n+      uri: 'https://hasura.io/learn/graphql',\\n+      headers: {\\n+        Authorization: `Bearer ${authToken}`\\n+      }\\n+    }),\\n+    cache: new InMemoryCache(),\\n+  });\\n+ };\\n\")), mdx(\"p\", null, \"Create the apollo client inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" and pass the client prop to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ApolloProvider>\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const App = ({ idToken }) => {\\n  const { loading, logout } = useAuth0();\\n  if (loading) {\\n    return <div>Loading...</div>;\\n  }\\n+  const client = createApolloClient(idToken);\\n   return (\\n+    <ApolloProvider client={client}>\\n       <div>\\n       </div>\\n+    </ApolloProvider>\\n   );\\n};\\n\")), mdx(\"p\", null, \"Let's try to understand what is happening here.\"), mdx(\"h3\", null, \"HttpLink and InMemoryCache\"), mdx(\"p\", null, \"We are creating an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpLink\"), \" to connect ApolloClient with the GraphQL server. As you know already, our GraphQL server is running at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://hasura.io/learn/graphql\")), mdx(\"p\", null, \"At the end, we instantiate ApolloClient by passing in our HttpLink and a new instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InMemoryCache\"), \" (recommended caching solution). We are wrapping all of this in a function which will return the client.\"), mdx(\"p\", null, \"We are going to make use of this function inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" component.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#react-apollo-hooks-installation","title":"React Apollo Hooks Installation"},{"url":"#create-apollo-client-instance","title":"Create Apollo Client Instance"},{"url":"#httplink-and-inmemorycache","title":"HttpLink and InMemoryCache"}]},"parent":{"__typename":"File","relativePath":"apollo-client.md"},"frontmatter":{"metaTitle":"Apollo Client GraphQL Setup | GraphQL React Apollo Hooks Tutorial","metaDescription":"You will learn how to configure Apollo Client in React by installing dependencies like apollo-boost @apollo/react-hooks apollo-link-ws"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/intro-to-graphql","title":"Intro to GraphQL"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/apollo-client","title":"Set up a GraphQL client with Apollo"}}},{"node":{"fields":{"slug":"/introduction","title":"Course Introduction"}}},{"node":{"fields":{"slug":"/mutations-variables","title":"Mutations & Query variables"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations","title":"Optimistic UI updates after mutations"}}},{"node":{"fields":{"slug":"/realtime-feed","title":"Realtime Feed"}}},{"node":{"fields":{"slug":"/queries","title":"Queries"}}},{"node":{"fields":{"slug":"/setup","title":"Tutorial & boilerplate setup"}}},{"node":{"fields":{"slug":"/subscriptions","title":"Subscriptions to show online users"}}},{"node":{"fields":{"slug":"/subscriptions/2-apollo-subscription","title":"Apollo useSubscription React hook"}}},{"node":{"fields":{"slug":"/what-next","title":"What next?"}}},{"node":{"fields":{"slug":"/subscriptions/1-subscription","title":"Subscription"}}},{"node":{"fields":{"slug":"/subscriptions/3-create-subscription","title":"Create Subscription and Render Result"}}},{"node":{"fields":{"slug":"/realtime-feed/2-sync-todo","title":"Sync new todos"}}},{"node":{"fields":{"slug":"/queries/2-create-query","title":"useQuery hook"}}},{"node":{"fields":{"slug":"/realtime-feed/1-fetch-public","title":"Fetch public todos - subscription"}}},{"node":{"fields":{"slug":"/queries/1-fetch-todos-query","title":"Fetch todos - query"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/1-update-todos","title":"Update todos - mutation"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3-remove-todos","title":"Remove todos - mutation"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/2-mutation-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.1-mutation-update-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.2-bulk-delete-mutation","title":"Bulk delete todos - mutation"}}},{"node":{"fields":{"slug":"/mutations-variables/2-query-variables","title":"Query Variables"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.3-clear-completed","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/mutations-variables/3-create-mutation","title":"useMutation Hook, Update Cache"}}},{"node":{"fields":{"slug":"/queries/3-handle-errors","title":"Handle loading/errors"}}},{"node":{"fields":{"slug":"/mutations-variables/1-create-todo","title":"Create todos - mutation"}}},{"node":{"fields":{"slug":"/intro-to-graphql/1-architecture","title":"Architecture"}}},{"node":{"fields":{"slug":"/intro-to-graphql/3-writing-data-mutations","title":"Writing data - Mutations"}}},{"node":{"fields":{"slug":"/intro-to-graphql/4-watching-data-subscriptions","title":"Watching data - Subscriptions"}}},{"node":{"fields":{"slug":"/intro-to-graphql/2-fetching-data-queries","title":"Fetching data - Queries"}}}]}},"pageContext":{"id":"84e2da56-17b6-5fe4-9813-84988b0c6459"}}}