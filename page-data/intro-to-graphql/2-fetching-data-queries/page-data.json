{"componentChunkName":"component---src-templates-docs-tsx","path":"/intro-to-graphql/2-fetching-data-queries","result":{"data":{"site":{"siteMetadata":{"title":"Naked Doc | Simple startup document","docsLocation":"https://github.com/yellow-high5/naked_doc/tree/master/content"}},"mdx":{"fields":{"id":"cc3f6ca7-089c-54ec-8241-79fcf6233f99","title":"Fetching data - Queries","slug":"/intro-to-graphql/2-fetching-data-queries"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Fetching data - Queries\",\n  \"metaTitle\": \"GraphQL Queries to fetch data | GraphQL React Apollo Hooks Tutorial\",\n  \"metaDescription\": \"Try out GraphQL Query using GraphiQL. A GraphQL query example with parameters, arguments and variables to fetch data dynamically\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Try out GraphQL queries\"), mdx(\"p\", null, \"For this tutorial we've set up a GraphQL API for you. The most common\\nway to browse a GraphQL API is to use GraphiQL. GraphiQL is a tool\\nbuilt by Facebook, (pronounced \\\"graphical\\\") that makes it easy to explore\\nany GraphQL API.\"), mdx(\"p\", null, \"When you connect GraphiQL to a GraphQL endpoint, it\\nqueries the server for its GraphQL schema and gives you a UI to browse\\nand test queries, and that powers its amazing autocomplete!\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://graphql-engine-cdn.hasura.io/learn-hasura/assets/graphql-react/graphiql.gif\",\n    \"alt\": \"GraphiQL demo\"\n  }))), mdx(\"p\", null, \"Tools like GraphiQL make GraphQL APIs really easy\\nto use and integrate APIs in your app without requiring\\nexternal documentation tools.\"), mdx(\"p\", null, \"You can access the GraphiQL for this realtime todo app tutorial here:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hasura.io/learn/graphql/graphiql\"\n  }), \"hasura.io/learn/graphql/graphiql\")), mdx(\"p\", null, \"When you work with a GraphQL API in a project you will almost always\\nuse a tool like GraphiQL to explore and test your GraphQL queries.\"), mdx(\"h2\", null, \"Basic GraphQL query\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Open GraphiQL at: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://hasura.io/learn/graphql/graphiql\"\n  }), \"hasura.io/learn/graphql/graphiql\"), \".\\nYou'll have to login to get an auth token to query the API. In a real-world scenario\\nyour GraphQL APIs will be protected.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"You'll see a URL, and headers that contain the auth\\ntoken that will be sent along with your GraphQL query.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Now, paste this GraphQL query in the GraphiQL window\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \" query {\\n   users {\\n     name\\n   }\\n }\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Hit \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ctrl + enter\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cmd + enter\"), \" (mac) or click on the \\u25B6\\uFE0F icon to run the GraphQL query\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"On the right, you should see a list of users by their names that are in the system!\")), mdx(\"b\", null, mdx(\"a\", {\n    href: \"https://hasura.io/learn/graphql/graphiql\",\n    target: \"_blank\"\n  }, \"Try it out in GraphiQL\")), mdx(\"p\", null, \"Recall that there is no magic here! The hosted GraphiQL app is sending a GraphQL query string\\nto the server at the given endpoint with the HTTP headers. The server then sends the response\\nthat you see on the right hand side.\"), mdx(\"h2\", null, \"Fetching \\\"graphs\\\"\"), mdx(\"p\", null, \"Our todo app has users, todos and information about users that are currently online.\\nThis is what our API \\\"schema\\\" looks like:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://graphql-engine-cdn.hasura.io/learn-hasura/assets/graphql-react/schema.png\",\n    \"alt\": \"Schema\"\n  }))), mdx(\"p\", null, \"As you can see, it is a \\\"graph\\\" like schema where all the 3 models are linked to each other.\"), mdx(\"p\", null, \"Let's try making queries that fetch different slices of our data from the overall \\\"graph\\\".\"), mdx(\"h3\", null, \"Fetch users and their todos\"), mdx(\"p\", null, \"This GraphQL query will fetch all the users and their publicly visible todos:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \" query {\\n   users {\\n     name\\n     todos {\\n       title\\n     }\\n   }\\n }\\n\")), mdx(\"b\", null, mdx(\"a\", {\n    href: \"https://hasura.io/learn/graphql/graphiql\",\n    target: \"_blank\"\n  }, \"Try it out in GraphiQL\")), mdx(\"h3\", null, \"Fetch online users and their profile information\"), mdx(\"p\", null, \"This GraphQL query will fetch all the currently online users\\nand their profile information (which is just their name for now):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \" query {\\n   online_users {\\n     last_seen\\n     user {\\n       name\\n     }\\n   }\\n }\\n\")), mdx(\"b\", null, mdx(\"a\", {\n    href: \"https://hasura.io/learn/graphql/graphiql\",\n    target: \"_blank\"\n  }, \"Try it out in GraphiQL\")), mdx(\"h2\", null, \"Adding parameters (arguments) to GraphQL queries\"), mdx(\"p\", null, \"In most API calls, you usually use parameters. For example, to specify what data you're fetching.\\nIf you're familiar with making \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" calls, you would have used a query parameter. For example,\\nto fetch only 10 todos you might have made this API call: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET /api/todos?limit=10\"), \".\"), mdx(\"p\", null, \"The GraphQL query analog of this is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"arguments\"), \" that you can attach to a \\\"field\\\".\"), mdx(\"h3\", null, \"Basic argument: Fetch 10 todos\"), mdx(\"p\", null, \"This GraphQL query will fetch 10 todos and not all of them.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query {\\n  todos(limit: 10) {\\n    id\\n    title\\n  }\\n}\\n\")), mdx(\"b\", null, mdx(\"a\", {\n    href: \"https://hasura.io/learn/graphql/graphiql\",\n    target: \"_blank\"\n  }, \"Try it out in GraphiQL\")), mdx(\"p\", null, \"The most important bit to check here is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"limit: 10\"), \". GraphQL servers will provide a list of\\narguments that can be used in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"()\"), \" next to specific fields. In our case, we are using\\nHasura for creating the GraphQL backend which provides filter, sort and pagination arguments.\\nThe GraphQL server or API that you use, might provide a different set of arguments that can be used.\"), mdx(\"h3\", null, \"Multiple arguments on multiple fields: Fetch 1 user and 5 most recent todos for each user\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query {\\n  users (limit: 1) {\\n    id\\n    name\\n    todos(order_by: {created_at: desc}, limit: 5) {\\n      id\\n      title\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Notice that we are passing arguments to different fields. This GraphQL query reads as:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Fetch users (with limit 1), and their todos (ordered by descending creation time, and limited to 5).\")), mdx(\"b\", null, mdx(\"a\", {\n    href: \"https://hasura.io/learn/graphql/graphiql\",\n    target: \"_blank\"\n  }, \"Try it out in GraphiQL\")), mdx(\"a\", {\n    name: \"query-variables\"\n  }), mdx(\"h2\", null, \"GraphQL variables: Passing arguments to your queries dynamically\"), mdx(\"p\", null, \"This is great, but we still have a problem. If we want to create a query\\nwhere we are fetching data with arguments that are provided dynamically, we'd have to\\ncreate the entire query string again.\"), mdx(\"p\", null, \"This is what we don't want to do:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var limit = getMaxTodosFromUserInput();\\nvar query = \\\"query { todos (limit: \\\" + limit.toString() + \\\") {id title} }\\\";\\n\")), mdx(\"p\", null, \"Thankfully, we don't ever have to do this! GraphQL variables are extra variables\\nthat you can send in a query so that the \\\"arguments\\\" can be provided dynamically!\"), mdx(\"h2\", null, \"Fetch $limit number of todos\"), mdx(\"p\", null, \"This is what our GraphQL query would look like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query ($limit: Int!) {\\n  todos(limit: $limit) {\\n    id\\n    title\\n  }\\n}\\n\")), mdx(\"p\", null, \"In addition to the query above, we send a variables object:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n   \\\"limit\\\": 10\\n}\\n\")), mdx(\"p\", null, \"Now instead of sending just the query to the GraphQL server, from our client\\nwe'll send both the query and the variables. The GraphQL server will use the\\nvariable in the right place in the query automatically for us!\"), mdx(\"p\", null, \"Let's try this out in GraphiQL:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Head to GraphiQL\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Write out this query\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Scroll to the bottom of the page, where you see a smaller panel \\\"Query Variables\\\"\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add the query variable as a JSON object\")), mdx(\"b\", null, mdx(\"a\", {\n    href: \"https://hasura.io/learn/graphql/graphiql\",\n    target: \"_blank\"\n  }, \"Try it out in GraphiQL\")), mdx(\"h2\", null, \"Summary\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can now make GraphQL queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You know how to pass arguments to your GraphQL queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You know how to make your arguments dynamic by using query variables\")), mdx(\"p\", null, \"Next, let's look at writing data and not just fetching data!\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#try-out-graphql-queries","title":"Try out GraphQL queries"},{"url":"#basic-graphql-query","title":"Basic GraphQL query"},{"url":"#fetching-graphs","title":"Fetching \"graphs\"","items":[{"url":"#fetch-users-and-their-todos","title":"Fetch users and their todos"},{"url":"#fetch-online-users-and-their-profile-information","title":"Fetch online users and their profile information"}]},{"url":"#adding-parameters-arguments-to-graphql-queries","title":"Adding parameters (arguments) to GraphQL queries","items":[{"url":"#basic-argument-fetch-10-todos","title":"Basic argument: Fetch 10 todos"},{"url":"#multiple-arguments-on-multiple-fields-fetch-1-user-and-5-most-recent-todos-for-each-user","title":"Multiple arguments on multiple fields: Fetch 1 user and 5 most recent todos for each user"}]},{"url":"#graphql-variables-passing-arguments-to-your-queries-dynamically","title":"GraphQL variables: Passing arguments to your queries dynamically"},{"url":"#fetch-limit-number-of-todos","title":"Fetch $limit number of todos"},{"url":"#summary","title":"Summary"}]},"parent":{"__typename":"File","relativePath":"intro-to-graphql/2-fetching-data-queries.md"},"frontmatter":{"metaTitle":"GraphQL Queries to fetch data | GraphQL React Apollo Hooks Tutorial","metaDescription":"Try out GraphQL Query using GraphiQL. A GraphQL query example with parameters, arguments and variables to fetch data dynamically"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/intro-to-graphql","title":"Intro to GraphQL"}}},{"node":{"fields":{"slug":"/intro-to-graphql/1-architecture","title":"Architecture"}}},{"node":{"fields":{"slug":"/intro-to-graphql/2-fetching-data-queries","title":"Fetching data - Queries"}}},{"node":{"fields":{"slug":"/intro-to-graphql/3-writing-data-mutations","title":"Writing data - Mutations"}}},{"node":{"fields":{"slug":"/intro-to-graphql/4-watching-data-subscriptions","title":"Watching data - Subscriptions"}}}]}},"pageContext":{"id":"cc3f6ca7-089c-54ec-8241-79fcf6233f99"}}}