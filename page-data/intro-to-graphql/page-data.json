{"componentChunkName":"component---src-templates-docs-tsx","path":"/intro-to-graphql","result":{"data":{"site":{"siteMetadata":{"title":"Naked Doc | Simple startup document","docsLocation":"https://github.com/yellow-high5/naked_doc/tree/master/content"}},"mdx":{"fields":{"id":"86a83c00-7caa-5ce3-9530-204cf8200e63","title":"Intro to GraphQL","slug":"/intro-to-graphql"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Intro to GraphQL\",\n  \"metaTitle\": \"Intro to GraphQL | GraphQL React Apollo Hooks Tutorial\",\n  \"metaDescription\": \"What is GraphQL? GraphQL is a specification for how to talk to an API. This part also covers GraphQL vs REST with an example and takes you over benefits of GraphQL\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What is GraphQL?\"), mdx(\"p\", null, \"GraphQL is a specification for how to talk to an API. It's typically used over HTTP where the key idea is to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" a \\\"query\\\" to an HTTP endpoint, instead of hitting different HTTP endpoints for different resources.\"), mdx(\"p\", null, \"GraphQL is designed for developers of web/mobile apps (HTTP clients) to be able to make API calls to fetch the data they need from their backend APIs conveniently.\"), mdx(\"h2\", null, \"GraphQL vs REST: an example\"), mdx(\"p\", null, \"Let's say you have an API to fetch a user's profile and their address. In a typical REST scenario, this is what the request/response would look like:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://graphql-engine-cdn.hasura.io/learn-hasura/assets/graphql-react/rest-api.png\",\n    \"alt\": \"GraphQL API example\"\n  }))), mdx(\"p\", null, \"If your API server was a GraphQL server instead, this is what your API calls would look like:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://graphql-engine-cdn.hasura.io/learn-hasura/assets/graphql-react/graphql-api.gif\",\n    \"alt\": \"GraphQL API example\"\n  }))), mdx(\"p\", null, \"You can see that the response JSON is different for different \\\"queries\\\" sent by the client.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Request1:         |  Response1:\\n\\nquery {           |  {\\n  user (id: 1) {  |    \\\"user\\\": {\\n    id            |       \\\"id\\\": 1\\n  }               |     }\\n}                 |  }\\n\\n----------------------------------------\\n\\nRequest2:         |   Response2:\\n\\nquery {           |   {\\n  user (id: 1) {  |     \\\"user\\\": {\\n    id            |       \\\"id\\\": 1\\n    name          |       \\\"name\\\": \\\"Elmo\\\"\\n  }               |     }\\n}                 |   }\\n\")), mdx(\"h2\", null, \"Thinking in GraphQL\"), mdx(\"p\", null, \"We're changing the way we think about API calls. Instead of making different API\\ncalls to different URLs to fetch data, we're making ad-hoc queries to a \\\"single\\nURL endpoint\\\" that returns data based on the query.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instead of 'GET'ing a resource you 'POST' a query that describes what data you\\nwant.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You think of the data your API returns as a \\\"graph\\\", this allows you to make\\nqueries to fetch \\\"related\\\" pieces of data in a single shot. In the example\\nabove, you fetch the user and the user's address (as a nested JSON object)\\nin the same API call, as opposed to making 2 API calls.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \\\"query\\\" you send as data in the POST request has a structure and a syntax.\\nThis \\\"language\\\" is called GraphQL.\")), mdx(\"p\", null, \"As you can see in the example above, GraphQL queries look very neat and easy to\\nread! This is because the query is the \\\"shape\\\" of the final JSON data you desire.\\nThis is one of the key-reasons that makes GraphQL a joy to work with!\"), mdx(\"h2\", null, \"GraphQL benefits\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Avoid over-fetching\"), \": You avoid fetching more data than you need because you\\ncan specify the exact \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"fields\"), \" you need.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Prevent multiple API calls\"), \": In case you need more data, you can also avoid\\nmaking multiple calls to your API. In the case above, you don't need to make\\n2 API calls to fetch \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"user\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"address\"), \" separately.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Lesser communication with API developers\"), \": Sometimes to fetch the exact data\\nyou need, especially if you need to fetch more data and want to avoid multiple API\\ncalls, you will need to ask your API developers to build a new API. With GraphQL,\\nyour work is \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"independent\"), \" of the API team! This allows you to work faster on your\\napp.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Self-documenting\"), \": Every GraphQL API conforms to a \\\"schema\\\" which is the graph\\ndata model and what kinds of queries a client can make. This allows the community\\nto build lots of cool tools to explore & visualise your API or create IDE plugins\\nthat autocomplete your GraphQL queries and even do \\\"codegen\\\". We'll understand this\\nin more detail later!\")), mdx(\"p\", null, \"Here's a quick chart to show you the GraphQL analogs of typical REST-ish terms:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"Requirement\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"REST\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"GraphQL\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"Fetching data objects\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"GET\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"query\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"Writing data\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"POST\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"mutation\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"Updating/deleting data\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"PUT/PATCH/DELETE\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"mutation\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"Watching/subscribing to data\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"-\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"subscription\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-is-graphql","title":"What is GraphQL?"},{"url":"#graphql-vs-rest-an-example","title":"GraphQL vs REST: an example"},{"url":"#thinking-in-graphql","title":"Thinking in GraphQL"},{"url":"#graphql-benefits","title":"GraphQL benefits"}]},"parent":{"__typename":"File","relativePath":"intro-to-graphql.md"},"frontmatter":{"metaTitle":"Intro to GraphQL | GraphQL React Apollo Hooks Tutorial","metaDescription":"What is GraphQL? GraphQL is a specification for how to talk to an API. This part also covers GraphQL vs REST with an example and takes you over benefits of GraphQL"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/intro-to-graphql","title":"Intro to GraphQL"}}},{"node":{"fields":{"slug":"/chapter1/1-architecture","title":"Architecture"}}},{"node":{"fields":{"slug":"/chapter1/2-fetching-data-queries","title":"Fetching data - Queries"}}},{"node":{"fields":{"slug":"/chapter1/3-writing-data-mutations","title":"Writing data - Mutations"}}},{"node":{"fields":{"slug":"/chapter1/4-watching-data-subscriptions","title":"Watching data - Subscriptions"}}}]}},"pageContext":{"id":"86a83c00-7caa-5ce3-9530-204cf8200e63"}}}