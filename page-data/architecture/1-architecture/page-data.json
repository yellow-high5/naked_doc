{"componentChunkName":"component---src-templates-docs-tsx","path":"/architecture/1-architecture","result":{"data":{"site":{"siteMetadata":{"title":"Naked Doc | Simple startup document","docsLocation":"https://github.com/yellow-high5/naked_doc/tree/master/content"}},"mdx":{"fields":{"id":"b1b07a62-57d9-57c0-9512-5634baad7ddb","title":"Architecture","slug":"/architecture/1-architecture"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Architecture\",\n  \"metaTitle\": \"GraphQL Architecture | GraphQL React Apollo Hooks Tutorial\",\n  \"metaDescription\": \"Learn about the architecture of GraphQL, GraphQL over HTTP, the client server model with an example of http request\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Before going further in understanding GraphQL, it's useful to get a sense of how\\nGraphQL is actually used in an HTTP client (typically a web/mobile app).\"), mdx(\"h2\", null, \"GraphQL over HTTP\"), mdx(\"p\", null, \"Check out the diagram below, to get a sense of how GraphQL is typically used in\\nyour stack:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://graphql-engine-cdn.hasura.io/learn-hasura/assets/graphql-react/graphql-on-http.png\",\n    \"alt\": \"GraphQL over HTTP\"\n  }))), mdx(\"h3\", null, \"GraphQL client-server flow:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Note that the GraphQL query is not really JSON; it looks like the shape of the\\nJSON you \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"want\"), \". So when we make a 'POST' request to send our GraphQL query to\\nthe server, it is sent as a \\\"string\\\" by the client.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The server gets the JSON object and extracts the query string. As per the\\nGraphQL syntax and the graph data model (GraphQL schema), the server processes\\nand validates the GraphQL query.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Just like a typical API server, the GraphQL API server then makes calls to a\\ndatabase or other services to fetch the data that the client requested.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The server then takes the data and returns it to the client in a JSON object.\")), mdx(\"h3\", null, \"Example GraphQL client setup:\"), mdx(\"p\", null, \"In your day to day work, you don't actually need to worry about the underlying\\nHTTP requests & responses.\"), mdx(\"p\", null, \"Just like when you work with a REST API and use a HTTP\\nclient to reduce the boilerplate in making API calls and handling responses, you\\ncan choose a GraphQL client to make writing GraphQL queries, sending them and\\nhandling responses much easier.\"), mdx(\"p\", null, \"In fact, the mechanism of how you send the GraphQL query and accept the GraphQL\\nresponse has become standard. This makes working with GraphQL very easy on the\\nclient.\"), mdx(\"p\", null, \"Here's what a typical GraphQL client setup and making a query would look like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\n// Setup a GraphQL client to use the endpoint\\n\\nconst client = new client(\\\"https://myapi.com/graphql\\\");\\n\\n\\n// Now, send your query as a string (Note that ` is used to create a multi-line\\n// string in javascript).\\n\\nclient.query(`\\n  query {\\n    user {\\n      id\\n      name\\n    }\\n  }`);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#graphql-over-http","title":"GraphQL over HTTP","items":[{"url":"#graphql-client-server-flow","title":"GraphQL client-server flow:"},{"url":"#example-graphql-client-setup","title":"Example GraphQL client setup:"}]}]},"parent":{"__typename":"File","relativePath":"architecture/1-architecture.md"},"frontmatter":{"metaTitle":"GraphQL Architecture | GraphQL React Apollo Hooks Tutorial","metaDescription":"Learn about the architecture of GraphQL, GraphQL over HTTP, the client server model with an example of http request"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/management/1-sample","title":"1 Sample"}}},{"node":{"fields":{"slug":"/management/2-sample","title":"2 Sample"}}},{"node":{"fields":{"slug":"/architecture/1-architecture","title":"Architecture"}}},{"node":{"fields":{"slug":"/architecture/2-fetching-data-queries","title":"Fetching data - Queries"}}},{"node":{"fields":{"slug":"/architecture/3-writing-data-mutations","title":"Writing data - Mutations"}}},{"node":{"fields":{"slug":"/architecture/4-watching-data-subscriptions","title":"Watching data - Subscriptions"}}},{"node":{"fields":{"slug":"/architecture","title":"しくみについて"}}},{"node":{"fields":{"slug":"/management","title":"運用方針"}}},{"node":{"fields":{"slug":"/","title":"ようこそ、Naked Docへ"}}}]}},"pageContext":{"id":"b1b07a62-57d9-57c0-9512-5634baad7ddb"}}}