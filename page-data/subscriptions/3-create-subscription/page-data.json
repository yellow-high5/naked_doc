{"componentChunkName":"component---src-templates-docs-tsx","path":"/subscriptions/3-create-subscription","result":{"data":{"site":{"siteMetadata":{"title":"Naked Doc | Simple startup document","docsLocation":"https://github.com/yellow-high5/naked_doc/tree/master/content"}},"mdx":{"fields":{"id":"c59b6024-0fdb-5833-877a-6c53e0fb1f92","title":"Create Subscription and Render Result","slug":"/subscriptions/3-create-subscription"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create Subscription and Render Result\",\n  \"metaTitle\": \"Apollo useSubscription React hook | GraphQL React Apollo Hooks Tutorial\",\n  \"metaDescription\": \"Integrate React Apollo useSubscription hook to watch for changes in realtime data. We use GraphQL subscriptions as an example to get live data in the React app\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"So let's define the graphql subscription to be used.\"), mdx(\"p\", null, \"Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/OnlineUsers/OnlineUsersWrapper.js\"), \" and add the following code, below the other imports\"), mdx(GithubLink, {\n    link: \"https://github.com/hasura/learn-graphql/blob/master/tutorials/frontend/react-apollo-hooks/app-final/src/components/OnlineUsers/OnlineUsersWrapper.js\",\n    text: \"src/components/OnlineUsers/OnlineUsersWrapper.js\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"- import React, { useEffect, useState } from \\\"react\\\";\\n+ import React, { useEffect, Fragment, useState } from \\\"react\\\";\\n- import { useMutation } from \\\"@apollo/react-hooks\\\";\\n+ import { useMutation, useSubscription } from \\\"@apollo/react-hooks\\\";\\n\")), mdx(\"p\", null, \"We are importing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useSubscription\"), \" React hook from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@apollo/react-hooks\"), \" and the graphql subscription query we defined above to fetch the online user data.\"), mdx(\"p\", null, \"Now, we will use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useSubscription\"), \" React hook passing the subscription query:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"+ const { loading, error, data } = useSubscription(\\n+     gql`\\n+       subscription getOnlineUsers {\\n+         online_users(order_by: { user: { name: asc } }) {\\n+           id\\n+           user {\\n+             name\\n+           }\\n+         }\\n+       }\\n+     `\\n+   );\\n+\\n+   if (loading) {\\n+     return <span>Loading...</span>;\\n+   }\\n+   if (error) {\\n+     console.error(error);\\n+     return <span>Error!</span>;\\n+   }\\n+   if (data) {\\n+     onlineUsersList = data.online_users.map(u => (\\n+       <OnlineUser key={u.id} user={u.user} />\\n+     ));\\n+   }\\n+\\n+   return (\\n+     <div className=\\\"onlineUsersWrapper\\\">\\n+       <Fragment>\\n+         <div className=\\\"sliderHeader\\\">\\n+           Online users - {onlineUsersList.length}\\n+         </div>\\n+         {onlineUsersList}\\n+       </Fragment>\\n+     </div>\\n+   );\\n+ };\\n\\nexport default OnlineUsersWrapper;\\n\\n\")), mdx(\"p\", null, \"Now that we have the real data, let's remove the mock online user state\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const OnlineUsersWrapper = () => {\\n-  const onlineUsers = [{ name: \\\"someUser1\\\" }, { name: \\\"someUser2\\\" }];\\n-\\n-  const onlineUsersList = [];\\n-  onlineUsers.forEach((user, index) => {\\n-    onlineUsersList.push(<OnlineUser key={index} index={index} user={user} />);\\n-  });\\n-\\n-  return (\\n-    <div className=\\\"onlineUsersWrapper\\\">\\n-      <div className=\\\"sliderHeader\\\">Online users - {onlineUsers.length}</div>\\n-      {onlineUsersList}\\n-    </div>\\n-  );\\n};\\n\")), mdx(\"h2\", null, \"How does this work?\"), mdx(\"p\", null, \"We are using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useSubscription\"), \" React hook which returns properties (similar to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMutation\"), \" React hooks). The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" property gives the result of the realtime data for the query we have made.\"), mdx(\"p\", null, \"Refresh your react app and see yourself online! Don't be surprised; There could be other users online as well.\"), mdx(\"p\", null, \"Awesome! You have completed basic implementations of a GraphQL Query, Mutation and Subscriptions. Easy isn't it?\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-does-this-work","title":"How does this work?"}]},"parent":{"__typename":"File","relativePath":"subscriptions/3-create-subscription.md"},"frontmatter":{"metaTitle":"Apollo useSubscription React hook | GraphQL React Apollo Hooks Tutorial","metaDescription":"Integrate React Apollo useSubscription hook to watch for changes in realtime data. We use GraphQL subscriptions as an example to get live data in the React app"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/introduction","title":"Course Introduction"}}},{"node":{"fields":{"slug":"/intro-to-graphql","title":"Intro to GraphQL"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations","title":"Optimistic UI updates after mutations"}}},{"node":{"fields":{"slug":"/mutations-variables","title":"Mutations & Query variables"}}},{"node":{"fields":{"slug":"/apollo-client","title":"Set up a GraphQL client with Apollo"}}},{"node":{"fields":{"slug":"/queries","title":"Queries"}}},{"node":{"fields":{"slug":"/realtime-feed","title":"Realtime Feed"}}},{"node":{"fields":{"slug":"/subscriptions","title":"Subscriptions to show online users"}}},{"node":{"fields":{"slug":"/what-next","title":"What next?"}}},{"node":{"fields":{"slug":"/setup","title":"Tutorial & boilerplate setup"}}},{"node":{"fields":{"slug":"/subscriptions/3-create-subscription","title":"Create Subscription and Render Result"}}},{"node":{"fields":{"slug":"/subscriptions/2-apollo-subscription","title":"Apollo useSubscription React hook"}}},{"node":{"fields":{"slug":"/subscriptions/1-subscription","title":"Subscription"}}},{"node":{"fields":{"slug":"/realtime-feed/2-sync-todo","title":"Sync new todos"}}},{"node":{"fields":{"slug":"/queries/1-fetch-todos-query","title":"Fetch todos - query"}}},{"node":{"fields":{"slug":"/queries/3-handle-errors","title":"Handle loading/errors"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/1-update-todos","title":"Update todos - mutation"}}},{"node":{"fields":{"slug":"/realtime-feed/1-fetch-public","title":"Fetch public todos - subscription"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/2-mutation-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3-remove-todos","title":"Remove todos - mutation"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.2-bulk-delete-mutation","title":"Bulk delete todos - mutation"}}},{"node":{"fields":{"slug":"/queries/2-create-query","title":"useQuery hook"}}},{"node":{"fields":{"slug":"/mutations-variables/3-create-mutation","title":"useMutation Hook, Update Cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.1-mutation-update-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/mutations-variables/1-create-todo","title":"Create todos - mutation"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.3-clear-completed","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/mutations-variables/2-query-variables","title":"Query Variables"}}},{"node":{"fields":{"slug":"/intro-to-graphql/4-watching-data-subscriptions","title":"Watching data - Subscriptions"}}},{"node":{"fields":{"slug":"/intro-to-graphql/3-writing-data-mutations","title":"Writing data - Mutations"}}},{"node":{"fields":{"slug":"/intro-to-graphql/1-architecture","title":"Architecture"}}},{"node":{"fields":{"slug":"/intro-to-graphql/2-fetching-data-queries","title":"Fetching data - Queries"}}}]}},"pageContext":{"id":"c59b6024-0fdb-5833-877a-6c53e0fb1f92"}}}