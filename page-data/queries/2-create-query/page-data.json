{"componentChunkName":"component---src-templates-docs-js","path":"/queries/2-create-query","result":{"data":{"site":{"siteMetadata":{"title":"Naked Doc | Simple startup document","docsLocation":"https://github.com/yellow-high5/naked_doc/tree/master/content"}},"mdx":{"fields":{"id":"698e986d-babd-5cb4-89f5-80af91fb1680","title":"useQuery hook","slug":"/queries/2-create-query"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"useQuery hook\",\n  \"metaTitle\": \"Apollo useQuery React hook | GraphQL React Apollo Hooks Tutorial\",\n  \"metaDescription\": \"We will use the Apollo Client useQuery React hook from @apollo/react-hooks to make GraphQL queries\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this section, we will implement GraphQL Queries and integrate with the react UI.\\nWith Apollo Client, you can send queries in 2 different ways.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"query\"), \" method directly and then process the response.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"New \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useQuery\"), \" React hook with React. (Recommended)\")), mdx(\"h3\", null, \"Apollo useQuery React Hook\"), mdx(\"p\", null, \"The recommended method is to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" React hook, where you will just pass your GraphQL query and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" React hook will fetch the data automatically.\"), mdx(\"p\", null, \"Great! Now let's define the graphql query to be used:\"), mdx(\"p\", null, \"Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/Todo/TodoPrivateList.js\"), \" and add the following code:\"), mdx(GithubLink, {\n    link: \"https://github.com/hasura/learn-graphql/blob/master/tutorials/frontend/react-apollo-hooks/app-final/src/components/Todo/TodoPrivateList.js\",\n    text: \"src/components/Todo/TodoPrivateList.js\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import React, { useState, Fragment } from \\\"react\\\";\\n+ import gql from 'graphql-tag';\\n\\nimport TodoItem from \\\"./TodoItem\\\";\\nimport TodoFilters from \\\"./TodoFilters\\\";\\n\\n+ const GET_MY_TODOS = gql`\\n+  query getMyTodos {\\n+    todos(where: { is_public: { _eq: false} }, order_by: { created_at: desc }) {\\n+      id\\n+      title\\n+      created_at\\n+      is_completed\\n+  }\\n+ }`;\\n\")), mdx(\"p\", null, \"We have now written the graphql query as a javascript constant using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gql\"), \" parser function. This function is used to parse the plain string as a graphql query.\"), mdx(\"h2\", null, \"What does this query do?\"), mdx(\"p\", null, \"The query fetches \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"todos\"), \" with a simple condition; \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"is_public\"), \" must be false. We sort the todos descending by its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"created_at\"), \" time according to the schema. We specify which fields we need for the todos node.\"), mdx(\"p\", null, \"The query is now ready, let's integrate it with our react code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\n+ import {useQuery} from '@apollo/react-hooks';\\n\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" React hook is being imported from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@apollo/react-hooks\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\nimport React, { Component, Fragment } from \\\"react\\\";\\nimport {useQuery} from '@apollo/react-hooks'\\nimport gql from 'graphql-tag';\\n\\nimport TodoItem from \\\"./TodoItem\\\";\\nimport TodoFilters from \\\"./TodoFilters\\\";\\n\\nconst GET_MY_TODOS = gql`\\n  query getMyTodos {\\n    todos(where: { is_public: { _eq: false} }, order_by: { created_at: desc }) {\\n      id\\n      title\\n      created_at\\n      is_completed\\n  }\\n}`;\\n\\nconst TodoPrivateList = props => {\\n  ...\\n}\\n\\n+ const TodoPrivateListQuery = () => {\\n+   const { loading, error, data } = useQuery(GET_MY_TODOS);\\n+\\n+   if (loading) {\\n+     return <div>Loading...</div>;\\n+   }\\n+   if (error) {\\n+     console.error(error);\\n+     return <div>Error!</div>;\\n+   }\\n+   return <TodoPrivateList todos={data.todos} />;\\n+ };\\n\\nexport default TodoPrivateList;\\n\")), mdx(\"p\", null, \"Remember that we wrapped our App component with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ApolloProvider>\"), \" and passed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client\"), \" as a prop. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" React hook is using the same client.\"), mdx(\"p\", null, \"We are importing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" React hook from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@apollo/react-hooks\"), \" and the graphql query we defined above to fetch the todo data.\"), mdx(\"p\", null, \"Let's remove the mock \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"todos\"), \" data which was used to populate sample data.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\nconst TodoPrivateList = props => {\\n  const [state, setState] = useState({\\n    filter: \\\"all\\\",\\n    clearInProgress: false,\\n-    todos: [\\n-      {\\n-        id: \\\"1\\\",\\n-        title: \\\"This is private todo 1\\\",\\n-        is_completed: true,\\n-        is_public: false\\n-      },\\n-      {\\n-        id: \\\"2\\\",\\n-        title: \\\"This is private todo 2\\\",\\n-        is_completed: false,\\n-        is_public: false\\n-      }\\n-    ]\\n  });\\n\\n  const filterResults = filter => {\\n    setState({\\n      ...state,\\n      filter: filter\\n    });\\n  };\\n\\n  const clearCompleted = () => {};\\n\\n-    let filteredTodos = state.todos;\\n+    const {todos} = props;\\n+\\n+    let filteredTodos = todos;\\n    if (state.filter === \\\"active\\\") {\\n-     filteredTodos = state.todos.filter(todo => todo.is_completed !== true);\\n+     filteredTodos = todos.filter(todo => todo.is_completed !== true);\\n    } else if (state.filter === \\\"completed\\\") {\\n-     filteredTodos = state.todos.filter(todo => todo.is_completed === true);\\n+     filteredTodos = todos.filter(todo => todo.is_completed === true);\\n    }\\n\\n    const todoList = [];\\n    filteredTodos.forEach((todo, index) => {\\n      todoList.push(<TodoItem key={index} index={index} todo={todo} />);\\n    });\\n\\n    return (\\n      ...\\n    );\\n\\n};\\n\\n\")), mdx(\"p\", null, \"Finally, update the exports.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"- export default TodoPrivateList;\\n+ export default TodoPrivateListQuery;\\n+ export {GET_MY_TODOS};\\n\")), mdx(\"p\", null, \"Woot! You have written your first GraphQL integration with React. Easy isn't it?\"), mdx(\"h2\", null, \"How does this work?\"), mdx(\"p\", null, \"When you use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" React hook, Apollo returns the data along with other properties. Most important ones are:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading\"), \": A boolean that indicates whether the request is in flight. If loading is true, then the request hasn't finished. Typically this information can be used to display a loading spinner.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \": A runtime error with graphQLErrors and networkError properties. Contains information about what went wrong with your query.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \": An object containing the result of your GraphQL query. This will contain our actual data from the server. In our case, it will be the todo data.\"), mdx(\"p\", null, \"You can read more about other properties that result object contains \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.apollographql.com/docs/react/essentials/queries/#result\"\n  }), \"here\")), mdx(\"p\", null, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" property, we are parsing the results from the server. In our query, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" property has an array \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"todos\"), \" which can be mapped over to render each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TodoItem\"), \".\"), mdx(\"p\", null, \"If you noted, there has been some client side filtering to the todos that are displayed.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#apollo-usequery-react-hook","title":"Apollo useQuery React Hook"}]},{"url":"#what-does-this-query-do","title":"What does this query do?"},{"url":"#how-does-this-work","title":"How does this work?"}]},"parent":{"__typename":"File","relativePath":"queries/2-create-query.md"},"frontmatter":{"metaTitle":"Apollo useQuery React hook | GraphQL React Apollo Hooks Tutorial","metaDescription":"We will use the Apollo Client useQuery React hook from @apollo/react-hooks to make GraphQL queries"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/apollo-client","title":"Set up a GraphQL client with Apollo"}}},{"node":{"fields":{"slug":"/intro-to-graphql","title":"Intro to GraphQL"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/queries","title":"Queries"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations","title":"Optimistic UI updates after mutations"}}},{"node":{"fields":{"slug":"/introduction","title":"Course Introduction"}}},{"node":{"fields":{"slug":"/realtime-feed","title":"Realtime Feed"}}},{"node":{"fields":{"slug":"/setup","title":"Tutorial & boilerplate setup"}}},{"node":{"fields":{"slug":"/subscriptions/2-apollo-subscription","title":"Apollo useSubscription React hook"}}},{"node":{"fields":{"slug":"/mutations-variables","title":"Mutations & Query variables"}}},{"node":{"fields":{"slug":"/subscriptions","title":"Subscriptions to show online users"}}},{"node":{"fields":{"slug":"/what-next","title":"What next?"}}},{"node":{"fields":{"slug":"/realtime-feed/2-sync-todo","title":"Sync new todos"}}},{"node":{"fields":{"slug":"/queries/1-fetch-todos-query","title":"Fetch todos - query"}}},{"node":{"fields":{"slug":"/subscriptions/1-subscription","title":"Subscription"}}},{"node":{"fields":{"slug":"/realtime-feed/1-fetch-public","title":"Fetch public todos - subscription"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/1-update-todos","title":"Update todos - mutation"}}},{"node":{"fields":{"slug":"/queries/3-handle-errors","title":"Handle loading/errors"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3-remove-todos","title":"Remove todos - mutation"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.2-bulk-delete-mutation","title":"Bulk delete todos - mutation"}}},{"node":{"fields":{"slug":"/subscriptions/3-create-subscription","title":"Create Subscription and Render Result"}}},{"node":{"fields":{"slug":"/queries/2-create-query","title":"useQuery hook"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.1-mutation-update-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/2-mutation-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.3-clear-completed","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/mutations-variables/2-query-variables","title":"Query Variables"}}},{"node":{"fields":{"slug":"/mutations-variables/3-create-mutation","title":"useMutation Hook, Update Cache"}}},{"node":{"fields":{"slug":"/mutations-variables/1-create-todo","title":"Create todos - mutation"}}},{"node":{"fields":{"slug":"/intro-to-graphql/1-architecture","title":"Architecture"}}},{"node":{"fields":{"slug":"/intro-to-graphql/3-writing-data-mutations","title":"Writing data - Mutations"}}},{"node":{"fields":{"slug":"/intro-to-graphql/2-fetching-data-queries","title":"Fetching data - Queries"}}},{"node":{"fields":{"slug":"/intro-to-graphql/4-watching-data-subscriptions","title":"Watching data - Subscriptions"}}}]}},"pageContext":{"id":"698e986d-babd-5cb4-89f5-80af91fb1680"}}}