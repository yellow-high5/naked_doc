{"componentChunkName":"component---src-templates-docs-tsx","path":"/queries/3-handle-errors","result":{"data":{"site":{"siteMetadata":{"title":"Naked Doc | Simple startup document","docsLocation":"https://github.com/yellow-high5/naked_doc/tree/master/content"}},"mdx":{"fields":{"id":"8086120f-d77e-5703-9bb6-94a36e75ac39","title":"Handle loading/errors","slug":"/queries/3-handle-errors"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Handle loading/errors\",\n  \"metaTitle\": \"Apollo useQuery React hook Error Handling | GraphQL React Apollo Hooks Tutorial\",\n  \"metaDescription\": \"We will handle the GraphQL loading and error states in React app using the Apollo useQuery React hook properties - loading and error \"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"As we saw in the previous step, Apollo returned a result object with properties . Among them \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \" are common ones that you will need to handle in your app.\"), mdx(\"p\", null, \"Now let's go back to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQuery\"), \" React hook that you wrote in the previous step.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\n  const TodoPrivateListQuery = () => {\\n  const { loading, error, data } = useQuery(GET_MY_TODOS);\\n\\n  if (loading) {\\n    return <div>Loading...</div>;\\n  }\\n  if (error) {\\n    console.error(error);\\n    return <div>Error!</div>;\\n  }\\n  return <TodoPrivateList todos={data.todos} />;\\n};\\n\\n\")), mdx(\"h3\", null, \"Apollo Query Loading State\"), mdx(\"p\", null, \"When this component mounts, the GraphQL query sent in the background may not have been completed. But we need to handle that temporary state of no data and hence we return some useful text during \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading\"), \" state.\\nIn this loading state, typically you can do fancy things like displaying a loading spinner.\"), mdx(\"h3\", null, \"Apollo Query Error State\"), mdx(\"p\", null, \"Now, the query could also end up in an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \" state due to various reasons. Sometimes the graphql query could be wrong, or the server isn't responding. Whatever may be the reason, the user facing UI should show something to convey that an error has occurred.\\nIn this error state, typically you can send these error messages to third-party services to track what went wrong.\"), mdx(\"p\", null, \"All said and done, these are two important states that need to be handled inside your component. What you have written above is basic, but sufficient for this tutorial.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#apollo-query-loading-state","title":"Apollo Query Loading State"},{"url":"#apollo-query-error-state","title":"Apollo Query Error State"}]},"parent":{"__typename":"File","relativePath":"queries/3-handle-errors.md"},"frontmatter":{"metaTitle":"Apollo useQuery React hook Error Handling | GraphQL React Apollo Hooks Tutorial","metaDescription":"We will handle the GraphQL loading and error states in React app using the Apollo useQuery React hook properties - loading and error "}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/intro-to-graphql","title":"Intro to GraphQL"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/apollo-client","title":"Set up a GraphQL client with Apollo"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations","title":"Optimistic UI updates after mutations"}}},{"node":{"fields":{"slug":"/mutations-variables","title":"Mutations & Query variables"}}},{"node":{"fields":{"slug":"/queries","title":"Queries"}}},{"node":{"fields":{"slug":"/introduction","title":"Course Introduction"}}},{"node":{"fields":{"slug":"/setup","title":"Tutorial & boilerplate setup"}}},{"node":{"fields":{"slug":"/subscriptions/2-apollo-subscription","title":"Apollo useSubscription React hook"}}},{"node":{"fields":{"slug":"/subscriptions/1-subscription","title":"Subscription"}}},{"node":{"fields":{"slug":"/realtime-feed","title":"Realtime Feed"}}},{"node":{"fields":{"slug":"/subscriptions/3-create-subscription","title":"Create Subscription and Render Result"}}},{"node":{"fields":{"slug":"/realtime-feed/1-fetch-public","title":"Fetch public todos - subscription"}}},{"node":{"fields":{"slug":"/subscriptions","title":"Subscriptions to show online users"}}},{"node":{"fields":{"slug":"/realtime-feed/2-sync-todo","title":"Sync new todos"}}},{"node":{"fields":{"slug":"/queries/1-fetch-todos-query","title":"Fetch todos - query"}}},{"node":{"fields":{"slug":"/queries/2-create-query","title":"useQuery hook"}}},{"node":{"fields":{"slug":"/queries/3-handle-errors","title":"Handle loading/errors"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/2-mutation-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/1-update-todos","title":"Update todos - mutation"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3-remove-todos","title":"Remove todos - mutation"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.1-mutation-update-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/what-next","title":"What next?"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.3-clear-completed","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/mutations-variables/2-query-variables","title":"Query Variables"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.2-bulk-delete-mutation","title":"Bulk delete todos - mutation"}}},{"node":{"fields":{"slug":"/mutations-variables/3-create-mutation","title":"useMutation Hook, Update Cache"}}},{"node":{"fields":{"slug":"/mutations-variables/1-create-todo","title":"Create todos - mutation"}}},{"node":{"fields":{"slug":"/intro-to-graphql/1-architecture","title":"Architecture"}}},{"node":{"fields":{"slug":"/intro-to-graphql/4-watching-data-subscriptions","title":"Watching data - Subscriptions"}}},{"node":{"fields":{"slug":"/intro-to-graphql/3-writing-data-mutations","title":"Writing data - Mutations"}}},{"node":{"fields":{"slug":"/intro-to-graphql/2-fetching-data-queries","title":"Fetching data - Queries"}}}]}},"pageContext":{"id":"8086120f-d77e-5703-9bb6-94a36e75ac39"}}}