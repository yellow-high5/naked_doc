{"componentChunkName":"component---src-templates-docs-js","path":"/optimistic-update-mutations/2-mutation-cache","result":{"data":{"site":{"siteMetadata":{"title":"Naked Doc | Simple startup document","docsLocation":"https://github.com/yellow-high5/naked_doc/tree/master/content"}},"mdx":{"fields":{"id":"2e9bf354-fbe4-5e1f-9a25-66f399a7d6d7","title":"Mutation and update cache","slug":"/optimistic-update-mutations/2-mutation-cache"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Mutation and update cache\",\n  \"metaTitle\": \"Apollo client.mutate for GraphQL mutation update | GraphQL React Apollo Hooks Tutorial\",\n  \"metaDescription\": \"We will use the Apollo useMutation React hook from @apollo/react-hooks as an example to modify existing data and update cache locally using readQuery and writeQuery and handle optimisticResponse\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Now let's do the integration part. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/Todo/TodoItem.js\"), \" and add the following code below the other imports:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"+ import gql from 'graphql-tag';\\n\")), mdx(\"p\", null, \"Let's define the graphql mutation to update the completed status of the todo\"), mdx(GithubLink, {\n    link: \"https://github.com/hasura/learn-graphql/blob/master/tutorials/frontend/react-apollo-hooks/app-final/src/components/Todo/TodoItem.js\",\n    text: \"src/components/Todo/TodoItem.js\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const TodoItem = ({index, todo}) => {\\n\\n  const removeTodo = (e) => {\\n    e.preventDefault();\\n    e.stopPropagation();\\n  };\\n\\n+  const TOGGLE_TODO = gql`\\n+    mutation toggleTodo ($id: Int!, $isCompleted: Boolean!) {\\n+      update_todos(where: {id: {_eq: $id}}, _set: {is_completed: $isCompleted}) {\\n+        affected_rows\\n+      }\\n+    }\\n+  `;\\n\\n  const toggleTodo = () => {};\\n\\n  return (\\n    ...\\n  );\\n};\\n\\nexport default TodoItem;\\n\\n\")), mdx(\"h3\", null, \"Apollo useMutation React hook\"), mdx(\"p\", null, \"We need to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMutation\"), \" React hook to make the mutation.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"  import React from 'react';\\n+ import { useMutation } from \\\"@apollo/react-hooks\\\";\\n  import gql from 'graphql-tag';\\n\\n  const TodoItem = ({index, todo}) => {\\n    const removeTodo = (e) => {\\n      e.preventDefault();\\n      e.stopPropagation();\\n    };\\n\\n    const TOGGLE_TODO = gql`\\n    mutation toggleTodo($id: Int!, $isCompleted: Boolean!) {\\n      update_todos(\\n        where: { id: { _eq: $id } }\\n        _set: { is_completed: $isCompleted }\\n      ) {\\n        affected_rows\\n      }\\n    }\\n  `;\\n\\n+ const [toggleTodoMutation] = useMutation(TOGGLE_TODO);\\n\\n  return (\\n    ...\\n  );\\n };\\n\\n export default TodoItem;\\n\")), mdx(\"p\", null, \"We already have the onChange handler toggleTodo for the input. Let's update the function to make a use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleTodoMutation\"), \" mutate function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"  const toggleTodo = () => {\\n+    toggleTodoMutation({\\n+      variables: {id: todo.id, isCompleted: !todo.is_completed},\\n+      optimisticResponse: true,\\n+    });\\n  };\\n\")), mdx(\"p\", null, \"The above code will just make a mutation, updating the todo's is_completed property in the database.\\nTo update the cache, we will be using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"update\"), \" function again to modify the cache. We need to fetch the current list of todos from the cache before modifying it. So let's import the query.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"+ import {GET_MY_TODOS} from './TodoPrivateList';\\n\")), mdx(\"p\", null, \"Now let's add the code for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"update\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"  const toggleTodo = () => {\\n    toggleTodoMutation({\\n      variables: {id: todo.id, isCompleted: !todo.is_completed},\\n      optimisticResponse: true,\\n+      update: (cache) => {\\n+        const existingTodos = cache.readQuery({ query: GET_MY_TODOS });\\n+        const newTodos = existingTodos.todos.map(t => {\\n+          if (t.id === todo.id) {\\n+            return {...t, is_completed: !t.is_completed};\\n+          } else {\\n+            return t;\\n+          }\\n+        });\\n+        cache.writeQuery({\\n+          query: GET_MY_TODOS,\\n+          data: {todos: newTodos}\\n+        });\\n+      }\\n    });\\n  };\\n\\n\")), mdx(\"p\", null, \"We are fetching the existing todos from the cache using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache.readQuery\"), \" and updating the is_completed value for the todo that has been updated.\"), mdx(\"p\", null, \"Finally we are writing the updated todo list to the cache using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache.writeQuery\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#apollo-usemutation-react-hook","title":"Apollo useMutation React hook"}]},"parent":{"__typename":"File","relativePath":"optimistic-update-mutations/2-mutation-cache.md"},"frontmatter":{"metaTitle":"Apollo client.mutate for GraphQL mutation update | GraphQL React Apollo Hooks Tutorial","metaDescription":"We will use the Apollo useMutation React hook from @apollo/react-hooks as an example to modify existing data and update cache locally using readQuery and writeQuery and handle optimisticResponse"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/apollo-client","title":"Set up a GraphQL client with Apollo"}}},{"node":{"fields":{"slug":"/intro-to-graphql","title":"Intro to GraphQL"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/queries","title":"Queries"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations","title":"Optimistic UI updates after mutations"}}},{"node":{"fields":{"slug":"/introduction","title":"Course Introduction"}}},{"node":{"fields":{"slug":"/realtime-feed","title":"Realtime Feed"}}},{"node":{"fields":{"slug":"/setup","title":"Tutorial & boilerplate setup"}}},{"node":{"fields":{"slug":"/subscriptions/2-apollo-subscription","title":"Apollo useSubscription React hook"}}},{"node":{"fields":{"slug":"/mutations-variables","title":"Mutations & Query variables"}}},{"node":{"fields":{"slug":"/subscriptions","title":"Subscriptions to show online users"}}},{"node":{"fields":{"slug":"/what-next","title":"What next?"}}},{"node":{"fields":{"slug":"/realtime-feed/2-sync-todo","title":"Sync new todos"}}},{"node":{"fields":{"slug":"/queries/1-fetch-todos-query","title":"Fetch todos - query"}}},{"node":{"fields":{"slug":"/subscriptions/1-subscription","title":"Subscription"}}},{"node":{"fields":{"slug":"/realtime-feed/1-fetch-public","title":"Fetch public todos - subscription"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/1-update-todos","title":"Update todos - mutation"}}},{"node":{"fields":{"slug":"/queries/3-handle-errors","title":"Handle loading/errors"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3-remove-todos","title":"Remove todos - mutation"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.2-bulk-delete-mutation","title":"Bulk delete todos - mutation"}}},{"node":{"fields":{"slug":"/subscriptions/3-create-subscription","title":"Create Subscription and Render Result"}}},{"node":{"fields":{"slug":"/queries/2-create-query","title":"useQuery hook"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.1-mutation-update-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/2-mutation-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.3-clear-completed","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/mutations-variables/2-query-variables","title":"Query Variables"}}},{"node":{"fields":{"slug":"/mutations-variables/3-create-mutation","title":"useMutation Hook, Update Cache"}}},{"node":{"fields":{"slug":"/mutations-variables/1-create-todo","title":"Create todos - mutation"}}},{"node":{"fields":{"slug":"/intro-to-graphql/1-architecture","title":"Architecture"}}},{"node":{"fields":{"slug":"/intro-to-graphql/3-writing-data-mutations","title":"Writing data - Mutations"}}},{"node":{"fields":{"slug":"/intro-to-graphql/2-fetching-data-queries","title":"Fetching data - Queries"}}},{"node":{"fields":{"slug":"/intro-to-graphql/4-watching-data-subscriptions","title":"Watching data - Subscriptions"}}}]}},"pageContext":{"id":"2e9bf354-fbe4-5e1f-9a25-66f399a7d6d7"}}}