{"componentChunkName":"component---src-templates-docs-tsx","path":"/optimistic-update-mutations/3.1-mutation-update-cache","result":{"data":{"site":{"siteMetadata":{"title":"Naked Doc | Simple startup document","docsLocation":"https://github.com/yellow-high5/naked_doc/tree/master/content"}},"mdx":{"fields":{"id":"95612cce-e953-516b-8562-8cdd893a07c6","title":"Mutation and update cache","slug":"/optimistic-update-mutations/3.1-mutation-update-cache"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Mutation and update cache\",\n  \"metaTitle\": \"Apollo useMutation React hook for GraphQL mutation delete | GraphQL React Apollo Hooks Tutorial\",\n  \"metaDescription\": \"We will use the Apollo useMutation React hook from @apollo/react-hooks with variables as an example to delete existing data and update cache locally using readQuery and writeQuery.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Now let's do the integration part. Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/components/Todo/TodoItem.js\"), \" and add the following code to define the delete mutation\"), mdx(GithubLink, {\n    link: \"https://github.com/hasura/learn-graphql/blob/master/tutorials/frontend/react-apollo-hooks/app-final/src/components/Todo/TodoItem.js\",\n    text: \"src/components/Todo/TodoItem.js\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const TodoItem = ({index, todo, client}) => {\\n\\n+  const REMOVE_TODO = gql`\\n+    mutation removeTodo ($id: Int!) {\\n+      delete_todos(where: {id: {_eq: $id}}) {\\n+        affected_rows\\n+      }\\n+    }\\n+  `;\\n\\n+  const [removeTodoMutation] = useMutation(REMOVE_TODO);\\n\\n\")), mdx(\"p\", null, \"We have a function defined to handle the button click to remove a todo. Let's update the function to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removeTodoMutation\"), \" mutate function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"  const removeTodo = (e) => {\\n    e.preventDefault();\\n    e.stopPropagation();\\n+   removeTodoMutation({\\n+     variables: {id: todo.id},\\n+     optimisticResponse: true,\\n+     update: (cache) => {\\n+       const existingTodos = cache.readQuery({ query: GET_MY_TODOS });\\n+       const newTodos = existingTodos.todos.filter(t => (t.id !== todo.id));\\n+       cache.writeQuery({\\n+         query: GET_MY_TODOS,\\n+         data: {todos: newTodos}\\n+       });\\n+     }\\n+   });\\n  };\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"parent":{"__typename":"File","relativePath":"optimistic-update-mutations/3.1-mutation-update-cache.md"},"frontmatter":{"metaTitle":"Apollo useMutation React hook for GraphQL mutation delete | GraphQL React Apollo Hooks Tutorial","metaDescription":"We will use the Apollo useMutation React hook from @apollo/react-hooks with variables as an example to delete existing data and update cache locally using readQuery and writeQuery."}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/introduction","title":"Course Introduction"}}},{"node":{"fields":{"slug":"/intro-to-graphql","title":"Intro to GraphQL"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations","title":"Optimistic UI updates after mutations"}}},{"node":{"fields":{"slug":"/mutations-variables","title":"Mutations & Query variables"}}},{"node":{"fields":{"slug":"/apollo-client","title":"Set up a GraphQL client with Apollo"}}},{"node":{"fields":{"slug":"/queries","title":"Queries"}}},{"node":{"fields":{"slug":"/realtime-feed","title":"Realtime Feed"}}},{"node":{"fields":{"slug":"/subscriptions","title":"Subscriptions to show online users"}}},{"node":{"fields":{"slug":"/what-next","title":"What next?"}}},{"node":{"fields":{"slug":"/setup","title":"Tutorial & boilerplate setup"}}},{"node":{"fields":{"slug":"/subscriptions/3-create-subscription","title":"Create Subscription and Render Result"}}},{"node":{"fields":{"slug":"/subscriptions/2-apollo-subscription","title":"Apollo useSubscription React hook"}}},{"node":{"fields":{"slug":"/subscriptions/1-subscription","title":"Subscription"}}},{"node":{"fields":{"slug":"/realtime-feed/2-sync-todo","title":"Sync new todos"}}},{"node":{"fields":{"slug":"/queries/1-fetch-todos-query","title":"Fetch todos - query"}}},{"node":{"fields":{"slug":"/queries/3-handle-errors","title":"Handle loading/errors"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/1-update-todos","title":"Update todos - mutation"}}},{"node":{"fields":{"slug":"/realtime-feed/1-fetch-public","title":"Fetch public todos - subscription"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/2-mutation-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3-remove-todos","title":"Remove todos - mutation"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.2-bulk-delete-mutation","title":"Bulk delete todos - mutation"}}},{"node":{"fields":{"slug":"/queries/2-create-query","title":"useQuery hook"}}},{"node":{"fields":{"slug":"/mutations-variables/3-create-mutation","title":"useMutation Hook, Update Cache"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.1-mutation-update-cache","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/mutations-variables/1-create-todo","title":"Create todos - mutation"}}},{"node":{"fields":{"slug":"/optimistic-update-mutations/3.3-clear-completed","title":"Mutation and update cache"}}},{"node":{"fields":{"slug":"/mutations-variables/2-query-variables","title":"Query Variables"}}},{"node":{"fields":{"slug":"/intro-to-graphql/4-watching-data-subscriptions","title":"Watching data - Subscriptions"}}},{"node":{"fields":{"slug":"/intro-to-graphql/3-writing-data-mutations","title":"Writing data - Mutations"}}},{"node":{"fields":{"slug":"/intro-to-graphql/1-architecture","title":"Architecture"}}},{"node":{"fields":{"slug":"/intro-to-graphql/2-fetching-data-queries","title":"Fetching data - Queries"}}}]}},"pageContext":{"id":"95612cce-e953-516b-8562-8cdd893a07c6"}}}