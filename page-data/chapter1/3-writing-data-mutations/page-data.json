{"componentChunkName":"component---src-templates-docs-tsx","path":"/chapter1/3-writing-data-mutations","result":{"data":{"site":{"siteMetadata":{"title":"Naked Doc | Simple startup document","docsLocation":"https://github.com/yellow-high5/naked_doc/tree/master/content"}},"mdx":{"fields":{"id":"09a1d65f-b8e8-51e5-88ba-9fcc388b7ae2","title":"Writing data - Mutations","slug":"/chapter1/3-writing-data-mutations"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Writing data - Mutations\",\n  \"metaTitle\": \"GraphQL Mutations to insert data | GraphQL React Apollo Hooks Tutorial\",\n  \"metaDescription\": \"Try out GraphQL Mutation using GraphiQL. A GraphQL mutation example with dynamic arguments and variables to insert data\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"These are the concepts you should know before you attack mutations (haha):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Link, {\n    to: \"/intro-to-graphql/2-fetching-data-queries#graphiql\",\n    mdxType: \"Link\"\n  }, \"Using GraphiQL\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Link, {\n    to: \"/intro-to-graphql/2-fetching-data-queries#query-variables\",\n    mdxType: \"Link\"\n  }, \"Using query variables\"))), mdx(\"p\", null, \"Now, let's get started with seeing how we can use GraphQL to \\\"write\\\" data.\\nGraphQL mutations are types of GraphQL queries that may result in the state\\nof your backend \\\"mutating\\\" or changing, just like typical \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'POST'\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'PUT'\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'PATCH'\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'DELETE'\"), \" APIs.\"), mdx(\"h2\", null, \"Basic mutations\"), mdx(\"p\", null, \"Since we're using Hasura for our GraphQL API, we get mutations for\\ninserts, updates or deletes that we can use in our app.\"), mdx(\"p\", null, \"Let's try these mutations out in the context of a todo app to see\\nwhat mutations look like. Mutations that you get from another GraphQL\\nservice, say if your API team has built their own,  might be different.\"), mdx(\"h3\", null, \"Create a todo\"), mdx(\"p\", null, \"Let's make an API call to create a todo. As you would have guessed, this\\nwill be a critical portion of our todo app. \\uD83D\\uDE09\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Protip\"), \": Now let's say we don't know what the name of the mutation to\\ncreate a todo. GraphiQL to the rescue!\\nHead to GraphiQL and on the right, click on the \\\"docs\\\" tab.\\nType \\\"todo\\\" there and you'll see a list of GraphQL queries and types\\nthat use todo. Read through their descriptions and you'll soon\\nfind that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insert_todos\"), \" is what you need.\")), mdx(\"p\", null, \"The mutation to create todos is titled \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insert_todos\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"mutation {\\n  insert_todos(objects: [{title: \\\"new todo\\\"}]) {\\n    returning {\\n      id\\n    }\\n  }\\n}\\n\")), mdx(\"b\", null, mdx(\"a\", {\n    href: \"https://hasura.io/learn/graphql/graphiql\",\n    target: \"_blank\"\n  }, \"Try it out in GraphiQL\")), mdx(\"h2\", null, \"Returning data after the mutation\"), mdx(\"p\", null, \"Notice that the data of the todo that is to be inserted is sent as\\nan argument to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insert_todos\"), \" mutation. But the \\\"fields\\\" of the mutation\\nspecify the shape of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"response\"), \" that you want from the server.\"), mdx(\"p\", null, \"Let's say we'd like to get the entire todo object once it's been created\\nas a response:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"mutation {\\n  insert_todos(objects: [{title: \\\"new todo\\\"}]) {\\n    returning {\\n      id\\n      title\\n      is_completed\\n      is_public\\n      created_at\\n    }\\n  }\\n}\\n\")), mdx(\"b\", null, mdx(\"a\", {\n    href: \"https://hasura.io/learn/graphql/graphiql\",\n    target: \"_blank\"\n  }, \"Try it out in GraphiQL\")), mdx(\"h2\", null, \"Parameterise what you insert\"), mdx(\"p\", null, \"For mutations, we would almost always have to parameterise the arguments! We\\nwould rarely, if ever, have a \\\"hardcoded\\\" mutation in our app. This is because\\nthe arguments of what data to capture, how to modify or delete something is usually\\ndependent on some user action.\"), mdx(\"p\", null, \"Now that we know how to parameterise using query variables, let's use that:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"# The parameterised GraphQL mutation\\nmutation($todo: todos_insert_input!){\\n  insert_todos(objects: [$todo]) {\\n    returning {\\n      id\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"# As a query variable\\n{\\n  \\\"todo\\\": {\\n    \\\"title\\\": \\\"A new dynamic todo\\\"\\n  }\\n}\\n\")), mdx(\"b\", null, mdx(\"a\", {\n    href: \"https://hasura.io/learn/graphql/graphiql\",\n    target: \"_blank\"\n  }, \"Try it out in GraphiQL\")), mdx(\"p\", null, \"We'll explore more mutations to update or delete data a little later.\\nThis is a good start to grokking mutations!\"), mdx(\"h2\", null, \"Summary\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can make basic GraphQL mutations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can pass dynamic arguments/data to mutations with query variables\")), mdx(\"p\", null, \"Next, let's look at GraphQL subscriptions\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#basic-mutations","title":"Basic mutations","items":[{"url":"#create-a-todo","title":"Create a todo"}]},{"url":"#returning-data-after-the-mutation","title":"Returning data after the mutation"},{"url":"#parameterise-what-you-insert","title":"Parameterise what you insert"},{"url":"#summary","title":"Summary"}]},"parent":{"__typename":"File","relativePath":"chapter1/3-writing-data-mutations.md"},"frontmatter":{"metaTitle":"GraphQL Mutations to insert data | GraphQL React Apollo Hooks Tutorial","metaDescription":"Try out GraphQL Mutation using GraphiQL. A GraphQL mutation example with dynamic arguments and variables to insert data"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/chapter1/1-architecture","title":"Architecture"}}},{"node":{"fields":{"slug":"/chapter1/2-fetching-data-queries","title":"Fetching data - Queries"}}},{"node":{"fields":{"slug":"/chapter1/3-writing-data-mutations","title":"Writing data - Mutations"}}},{"node":{"fields":{"slug":"/chapter1/4-watching-data-subscriptions","title":"Watching data - Subscriptions"}}},{"node":{"fields":{"slug":"/","title":"ようこそ、Naked Docへ"}}},{"node":{"fields":{"slug":"/chapter1","title":"しくみについて"}}},{"node":{"fields":{"slug":"/management","title":"Intro to GraphQL"}}},{"node":{"fields":{"slug":"/management/1-sample","title":"1 Sample"}}},{"node":{"fields":{"slug":"/management/2-sample","title":"2 Sample"}}}]}},"pageContext":{"id":"09a1d65f-b8e8-51e5-88ba-9fcc388b7ae2"}}}